@page
@model GoodsEnterprise.Web.Pages.ResetPasswordModel
@{
    ViewData["Title"] = "Reset Password";
    Layout = "";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Reset your password for Redneval Admin Portal" />
    <meta name="robots" content="noindex, nofollow" />
    <title>Reset Password - Redneval Admin</title>
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" 
          integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" 
          crossorigin="anonymous">
    <link href="~/css/modern-components.css" rel="stylesheet" />
    <style>
        :root {
            --primary-color: #2c5282;
            --secondary-color: #4a5568;
            --success-color: #38a169;
            --danger-color: #e53e3e;
            --warning-color: #dd6b20;
            --info-color: #3182ce;
        }
        
        body {
            background: #f8f9fa;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            line-height: 1.6;
            color: #2d3748;
        }
        
        .reset-password-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            max-width: 480px;
            width: 100%;
            margin: 2rem;
            padding: 2.5rem;
            border: 1px solid #e2e8f0;
        }
        
        .reset-password-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .reset-password-logo {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }
        
        .reset-password-subtitle {
            color: var(--secondary-color);
            margin: 1rem 0 2rem;
            font-size: 1.05rem;
            line-height: 1.5;
        }
        
        .password-strength {
            margin-top: 0.5rem;
        }
        
        .password-strength .progress {
            height: 4px;
            background-color: #e2e8f0;
            border-radius: 2px;
            margin-bottom: 0.25rem;
        }
        
        .password-strength .progress-bar {
            transition: width 0.3s ease, background-color 0.3s ease;
        }
        
        .password-requirements {
            font-size: 0.85rem;
            color: var(--secondary-color);
            margin-top: 0.5rem;
        }
        
        .password-requirement {
            display: flex;
            align-items: center;
            margin-bottom: 0.25rem;
        }
        
        .password-requirement svg {
            margin-right: 0.5rem;
            flex-shrink: 0;
        }
        
        .password-requirement.valid {
            color: var(--success-color);
        }
        
        .password-toggle {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: var(--secondary-color);
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
        }
        
        .password-toggle:hover {
            background-color: #edf2f7;
        }
        
        .password-toggle:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(66, 153, 225, 0.5);
        }
        
        .modern-form-group {
            position: relative;
        }
        
        .modern-form-input {
            padding-right: 2.5rem;
        }
        
        .modern-button {
            transition: all 0.2s ease;
            font-weight: 500;
            padding: 0.625rem 1.5rem;
            border-radius: 6px;
        }
        
        .modern-button-primary {
            background-color: var(--primary-color);
            border: 1px solid var(--primary-color);
        }
        
        .modern-button-primary:hover {
            background-color: #2c5282e6;
            border-color: #2c5282e6;
        }
        
        .modern-button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
        
        .modern-alert {
            padding: 1rem;
            border-radius: 6px;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            font-size: 0.95rem;
            line-height: 1.5;
        }
        
        .modern-alert svg {
            flex-shrink: 0;
            margin-top: 0.125rem;
        }
        
        .modern-alert-danger {
            background-color: #fff5f5;
            border: 1px solid #fed7d7;
            color: var(--danger-color);
        }
        
        .modern-alert-success {
            background-color: #f0fff4;
            border: 1px solid #c6f6d5;
            color: var(--success-color);
        }
        
        .text-primary {
            color: var(--primary-color) !important;
        }
        
        .text-success {
            color: var(--success-color) !important;
        }
        
        .text-warning {
            color: var(--warning-color) !important;
        }
        
        .text-danger {
            color: var(--danger-color) !important;
        }
        
        .text-info {
            color: var(--info-color) !important;
        }
        
        .bg-success {
            background-color: var(--success-color) !important;
        }
        
        .bg-warning {
            background-color: var(--warning-color) !important;
        }
        
        .bg-danger {
            background-color: var(--danger-color) !important;
        }
        
        .bg-info {
            background-color: var(--info-color) !important;
        }
        
        .bg-primary {
            background-color: var(--primary-color) !important;
        }
        
        @@media (max-width: 480px) {
            .reset-password-container {
                margin: 1rem;
                padding: 1.5rem;
            }
            
            .reset-password-logo {
                font-size: 1.5rem;
            }
            
            h2 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="reset-password-container">
        <div class="reset-password-header">
            <div class="reset-password-logo">
                <svg width="28" height="28" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm2 6a2 2 0 114 0 2 2 0 01-4 0zm8-1a1 1 0 100 2h2a1 1 0 100-2h-2z" clip-rule="evenodd"></path>
                </svg>
                <span>Redneval Admin</span>
            </div>
            <h2>Reset Your Password</h2>
            <p class="reset-password-subtitle">Enter a new password for your account</p>
        </div>

        @if (!string.IsNullOrEmpty(Model?.ErrorMessage))
        {
            <div class="modern-alert modern-alert-danger" role="alert">
                <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                </svg>
                <div>@Model.ErrorMessage</div>
            </div>
        }

        @if (!string.IsNullOrEmpty(Model?.SuccessMessage))
        {
            <div class="modern-alert modern-alert-success" role="alert">
                <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                </svg>
                <div>@Model.SuccessMessage</div>
            </div>
            
            <div class="text-center mt-4">
                <a href="/login" class="modern-button modern-button-primary w-100">
                    Return to Login
                </a>
            </div>
        }

        @if (Model?.ShowResetForm == true)
        {
            <form method="post" id="reset-form">
                <input type="hidden" asp-for="Input.Email" value="@Model.Email" />
                <input type="hidden" asp-for="Input.Token" value="@Model.Token" />
                
                <div class="modern-form-group mb-4">
                    <label asp-for="Input.Password" class="modern-form-label">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20" style="margin-right: 0.5rem;">
                            <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
                        </svg>
                        New Password
                    </label>
                    <div class="position-relative">
                        <input asp-for="Input.Password" 
                               type="password" 
                               class="modern-form-input" 
                               placeholder="Enter your new password" 
                               required 
                               minlength="8"
                               autocomplete="new-password"
                               data-password-validator />
                        <button type="button" class="password-toggle" aria-label="Toggle password visibility">
                            <svg class="password-visible d-none" width="18" height="18" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                            </svg>
                            <svg class="password-hidden" width="18" height="18" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
                                <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                            </svg>
                        </button>
                    </div>
                    
                    <div class="password-strength mt-2">
                        <div class="progress">
                            <div id="password-strength-bar" class="progress-bar" role="progressbar" style="width: 0%;"></div>
                        </div>
                        <small class="text-muted">Password strength: <span id="password-strength-text">Very Weak</span></small>
                    </div>
                    
                    <div class="password-requirements mt-2">
                        <div class="password-requirement" data-requirement="length">
                            <svg width="16" height="16" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="10" cy="10" r="9" stroke="#E2E8F0" stroke-width="2"/>
                                <path d="M6 10L9 13L14 7" stroke="#E2E8F0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            At least 8 characters
                        </div>
                        <div class="password-requirement" data-requirement="uppercase">
                            <svg width="16" height="16" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="10" cy="10" r="9" stroke="#E2E8F0" stroke-width="2"/>
                                <path d="M6 10L9 13L14 7" stroke="#E2E8F0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            At least 1 uppercase letter
                        </div>
                        <div class="password-requirement" data-requirement="number">
                            <svg width="16" height="16" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="10" cy="10" r="9" stroke="#E2E8F0" stroke-width="2"/>
                                <path d="M6 10L9 13L14 7" stroke="#E2E8F0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            At least 1 number
                        </div>
                        <div class="password-requirement" data-requirement="special">
                            <svg width="16" height="16" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="10" cy="10" r="9" stroke="#E2E8F0" stroke-width="2"/>
                                <path d="M6 10L9 13L14 7" stroke="#E2E8F0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            At least 1 special character
                        </div>
                    </div>
                    <span asp-validation-for="Input.Password" class="text-danger d-block mt-1"></span>
                </div>
                
                <div class="modern-form-group mb-4">
                    <label asp-for="Input.ConfirmPassword" class="modern-form-label">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 20 20" style="margin-right: 0.5rem;">
                            <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
                        </svg>
                        Confirm New Password
                    </label>
                    <div class="position-relative">
                        <input asp-for="Input.ConfirmPassword" 
                               type="password" 
                               class="modern-form-input" 
                               placeholder="Confirm your new password" 
                               required
                               minlength="8"
                               autocomplete="new-password" />
                        <button type="button" class="password-toggle" aria-label="Toggle password visibility">
                            <svg class="password-visible d-none" width="18" height="18" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                            </svg>
                            <svg class="password-hidden" width="18" height="18" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
                                <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                            </svg>
                        </button>
                    </div>
                    <span asp-validation-for="Input.ConfirmPassword" class="text-danger d-block mt-1"></span>
                </div>

                <div class="mt-4">
                    <button type="submit" class="modern-button modern-button-primary w-100" id="reset-button">
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true" id="reset-spinner"></span>
                        <span id="reset-button-text">Reset Password</span>
                    </button>
                </div>
            </form>
            
            <div class="text-center mt-4">
                <a href="/login" class="text-primary">Back to Login</a>
            </div>
        }
    </div>

    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Password visibility toggle
            const passwordToggles = document.querySelectorAll('.password-toggle');
            
            passwordToggles.forEach(toggle => {
                toggle.addEventListener('click', function() {
                    const input = this.closest('.position-relative').querySelector('input');
                    const isPassword = input.type === 'password';
                    
                    input.type = isPassword ? 'text' : 'password';
                    this.classList.toggle('show');
                    
                    // Toggle SVG icons
                    const visibleIcon = this.querySelector('.password-visible');
                    const hiddenIcon = this.querySelector('.password-hidden');
                    
                    if (isPassword) {
                        visibleIcon.classList.remove('d-none');
                        hiddenIcon.classList.add('d-none');
                    } else {
                        visibleIcon.classList.add('d-none');
                        hiddenIcon.classList.remove('d-none');
                    }
                });
            });
            
            // Password strength meter
            const passwordInput = document.querySelector('input[data-password-validator]');
            const passwordStrengthBar = document.getElementById('password-strength-bar');
            const passwordStrengthText = document.getElementById('password-strength-text');
            const passwordRequirements = document.querySelectorAll('.password-requirement');
            
            if (passwordInput) {
                passwordInput.addEventListener('input', function() {
                    const password = this.value;
                    const strength = calculatePasswordStrength(password);
                    updatePasswordStrengthMeter(strength);
                    validatePasswordRequirements(password);
                });
            }
            
            // Form submission handling
            const resetForm = document.getElementById('reset-form');
            const resetButton = document.getElementById('reset-button');
            const resetButtonText = document.getElementById('reset-button-text');
            const resetSpinner = document.getElementById('reset-spinner');
            
            if (resetForm) {
                resetForm.addEventListener('submit', function(e) {
                    const password = document.querySelector('input[name="Input.Password"]').value;
                    const confirmPassword = document.querySelector('input[name="Input.ConfirmPassword"]').value;
                    
                    if (password !== confirmPassword) {
                        e.preventDefault();
                        alert('Passwords do not match');
                        return false;
                    }
                    
                    // Show loading state
                    resetButton.disabled = true;
                    resetButtonText.textContent = 'Resetting...';
                    resetSpinner.classList.remove('d-none');
                });
            }
            
            function calculatePasswordStrength(password) {
                let strength = 0;
                
                // Length check
                if (password.length >= 8) strength += 1;
                if (password.length >= 12) strength += 1;
                
                // Complexity checks
                if (/[A-Z]/.test(password)) strength += 1; // Uppercase
                if (/[0-9]/.test(password)) strength += 1;  // Numbers
                if (/[^A-Za-z0-9]/.test(password)) strength += 1; // Special chars
                
                return Math.min(strength, 5); // Cap at 5
            }
            
            function updatePasswordStrengthMeter(strength) {
                const strengthPercent = (strength / 5) * 100;
                let strengthClass = 'bg-danger';
                let strengthLabel = 'Very Weak';
                
                if (strength >= 2) {
                    strengthClass = 'bg-warning';
                    strengthLabel = 'Weak';
                }
                if (strength >= 3) {
                    strengthClass = 'bg-info';
                    strengthLabel = 'Fair';
                }
                if (strength >= 4) {
                    strengthClass = 'bg-primary';
                    strengthLabel = 'Strong';
                }
                if (strength >= 5) {
                    strengthClass = 'bg-success';
                    strengthLabel = 'Very Strong';
                }
                
                passwordStrengthBar.style.width = strengthPercent + '%';
                passwordStrengthBar.className = 'progress-bar ' + strengthClass;
                passwordStrengthText.textContent = strengthLabel;
            }
            
            function validatePasswordRequirements(password) {
                // Check each requirement
                const hasMinLength = password.length >= 8;
                const hasUppercase = /[A-Z]/.test(password);
                const hasNumber = /[0-9]/.test(password);
                const hasSpecialChar = /[^A-Za-z0-9]/.test(password);
                
                // Update requirement indicators
                updateRequirement('length', hasMinLength);
                updateRequirement('uppercase', hasUppercase);
                updateRequirement('number', hasNumber);
                updateRequirement('special', hasSpecialChar);
                
                // Enable/disable submit button based on all requirements met
                const submitButton = document.querySelector('button[type="submit"]');
                if (submitButton) {
                    const allMet = hasMinLength && hasUppercase && hasNumber && hasSpecialChar;
                    submitButton.disabled = !allMet;
                }
            }
            
            function updateRequirement(type, isValid) {
                const requirement = document.querySelector(`.password-requirement[data-requirement="${type}"]`);
                if (!requirement) return;
                
                const icon = requirement.querySelector('svg path:last-child');
                
                if (isValid) {
                    requirement.classList.add('valid');
                    if (icon) {
                        icon.style.stroke = '#28a745';
                        icon.style.strokeWidth = '2';
                    }
                } else {
                    requirement.classList.remove('valid');
                    if (icon) {
                        icon.style.stroke = '#E2E8F0';
                        icon.style.strokeWidth = '2';
                    }
                }
            }
            
            // Initialize form validation
            if (typeof $.fn.validate !== 'undefined') {
                $('form').validate({
                    errorClass: 'is-invalid',
                    errorElement: 'div',
                    errorPlacement: function(error, element) {
                        error.addClass('invalid-feedback');
                        element.closest('.form-group').append(error);
                    },
                    highlight: function(element, errorClass, validClass) {
                        $(element).addClass('is-invalid').removeClass('is-valid');
                    },
                    unhighlight: function(element, errorClass, validClass) {
                        $(element).removeClass('is-invalid').addClass('is-valid');
                    }
                });
            }
        });
    </script>
    
    @* Include Modern Alert System *@
    <script src="~/js/modern-interactions.js"></script>
    @await Html.PartialAsync("_ModernAlerts")
</body>
</html>
